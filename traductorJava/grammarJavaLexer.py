# Generated from grammarJava.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,105,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,5,3,
        57,8,3,10,3,12,3,60,9,3,1,4,4,4,63,8,4,11,4,12,4,64,1,5,1,5,1,6,
        1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,
        13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,3,
        17,97,8,17,1,17,4,17,100,8,17,11,17,12,17,101,1,17,1,17,0,0,18,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,1,0,3,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,108,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,1,37,1,0,0,0,3,41,1,0,0,0,5,48,1,0,0,0,7,54,1,0,0,0,9,62,1,0,0,
        0,11,66,1,0,0,0,13,68,1,0,0,0,15,70,1,0,0,0,17,72,1,0,0,0,19,74,
        1,0,0,0,21,76,1,0,0,0,23,79,1,0,0,0,25,81,1,0,0,0,27,83,1,0,0,0,
        29,85,1,0,0,0,31,87,1,0,0,0,33,91,1,0,0,0,35,99,1,0,0,0,37,38,5,
        100,0,0,38,39,5,101,0,0,39,40,5,102,0,0,40,2,1,0,0,0,41,42,5,114,
        0,0,42,43,5,101,0,0,43,44,5,116,0,0,44,45,5,117,0,0,45,46,5,114,
        0,0,46,47,5,110,0,0,47,4,1,0,0,0,48,49,5,112,0,0,49,50,5,114,0,0,
        50,51,5,105,0,0,51,52,5,110,0,0,52,53,5,116,0,0,53,6,1,0,0,0,54,
        58,7,0,0,0,55,57,7,1,0,0,56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,
        0,58,59,1,0,0,0,59,8,1,0,0,0,60,58,1,0,0,0,61,63,7,2,0,0,62,61,1,
        0,0,0,63,64,1,0,0,0,64,62,1,0,0,0,64,65,1,0,0,0,65,10,1,0,0,0,66,
        67,5,43,0,0,67,12,1,0,0,0,68,69,5,45,0,0,69,14,1,0,0,0,70,71,5,42,
        0,0,71,16,1,0,0,0,72,73,5,47,0,0,73,18,1,0,0,0,74,75,5,61,0,0,75,
        20,1,0,0,0,76,77,5,61,0,0,77,78,5,61,0,0,78,22,1,0,0,0,79,80,5,40,
        0,0,80,24,1,0,0,0,81,82,5,41,0,0,82,26,1,0,0,0,83,84,5,58,0,0,84,
        28,1,0,0,0,85,86,5,44,0,0,86,30,1,0,0,0,87,88,5,32,0,0,88,89,1,0,
        0,0,89,90,6,15,0,0,90,32,1,0,0,0,91,92,5,9,0,0,92,93,1,0,0,0,93,
        94,6,16,0,0,94,34,1,0,0,0,95,97,5,13,0,0,96,95,1,0,0,0,96,97,1,0,
        0,0,97,98,1,0,0,0,98,100,5,10,0,0,99,96,1,0,0,0,100,101,1,0,0,0,
        101,99,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,104,6,17,0,0,
        104,36,1,0,0,0,5,0,58,64,96,101,1,6,0,0
    ]

class grammarJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    RETURN = 2
    PRINT = 3
    IDCLASS = 4
    NUMBERS = 5
    PLUS = 6
    MINUS = 7
    MULTIPLY = 8
    DIVIDE = 9
    ASIGNAN = 10
    EQUAL = 11
    LPAREN = 12
    RPAREN = 13
    COLON = 14
    COMMA = 15
    BLANKSPACE = 16
    TAB = 17
    RCAR = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'return'", "'print'", "'+'", "'-'", "'*'", "'/'", 
            "'='", "'=='", "'('", "')'", "':'", "','", "' '", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "RETURN", "PRINT", "IDCLASS", "NUMBERS", "PLUS", "MINUS", 
            "MULTIPLY", "DIVIDE", "ASIGNAN", "EQUAL", "LPAREN", "RPAREN", 
            "COLON", "COMMA", "BLANKSPACE", "TAB", "RCAR" ]

    ruleNames = [ "DEF", "RETURN", "PRINT", "IDCLASS", "NUMBERS", "PLUS", 
                  "MINUS", "MULTIPLY", "DIVIDE", "ASIGNAN", "EQUAL", "LPAREN", 
                  "RPAREN", "COLON", "COMMA", "BLANKSPACE", "TAB", "RCAR" ]

    grammarFileName = "grammarJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


